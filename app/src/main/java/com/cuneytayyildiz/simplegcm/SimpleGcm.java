package com.cuneytayyildiz.simplegcm;


import android.content.Context;
import android.content.SharedPreferences;
import android.text.TextUtils;
import android.util.Log;

public class SimpleGcm {

    private static final String PREFS_SIMPLEGCM = "simplegcm";
    private static final String PROPERTY_REG_ID = "registration_id";
    private static final String PROPERTY_APP_VERSION = "appVersion";

    private static SimpleGcm sInstance;
    private GcmListener mGcmListener;

    public static void init(Context context) {
        getInstance().onCreate(context);
    }

    synchronized static SimpleGcm getInstance() {
        if (sInstance == null) {
            sInstance = new SimpleGcm();
        }
        return sInstance;
    }

    public static void setGcmListener(GcmListener gcmListener) {
        getInstance().mGcmListener = gcmListener;
    }


    public static boolean isRegistered(Context context) {
        return !TextUtils.isEmpty(getRegistrationId(context));
    }

    private static void storeRegistrationId(Context context, String regId) {
        int appVersion = Utils.getAppVersion(context);
        Log.d(Constants.TAG, "Saving regId on app version " + appVersion);

        final SharedPreferences.Editor editor = getGcmPreferences(context).edit();
        editor.putString(PROPERTY_REG_ID, regId);
        editor.putInt(PROPERTY_APP_VERSION, appVersion);
        editor.apply();
    }


    public static String getRegistrationId(Context context) {
        SharedPreferences prefs = getGcmPreferences(context);
        String registrationId = prefs.getString(PROPERTY_REG_ID, "");
        if (registrationId.isEmpty()) {
            Log.d(Constants.TAG, "Registration not found.");
            return "";
        }
        // Check if app was updated; if so, it must clear the registration ID
        // since the existing regID is not guaranteed to work with the new
        // app version.
        int registeredVersion = prefs.getInt(PROPERTY_APP_VERSION, Integer.MIN_VALUE);
        int currentVersion = Utils.getAppVersion(context);
        if (registeredVersion != currentVersion) {
            Log.d(Constants.TAG, "App version changed.");
            return "";
        }
        return registrationId;
    }

    public static void removeRegistrationId(Context context) {
        final SharedPreferences prefs = getGcmPreferences(context);
        prefs.edit()
                .remove(PROPERTY_REG_ID)
                .remove(PROPERTY_APP_VERSION)
                .apply();
    }

    public static void reSendRegistrationIdToBackend(Context context) {
        getInstance()
                .getGcmListener(context)
                .sendRegistrationIdToBackend(getRegistrationId(context));
    }

    private static SharedPreferences getGcmPreferences(Context context) {
        return context.getSharedPreferences(PREFS_SIMPLEGCM, Context.MODE_PRIVATE);
    }

    private void onCreate(Context context) {
        // The check method fails if: no network connection / app already registered / GooglePlayServices unavailable
        if (Utils.checkCanAndShouldRegister(context)) {
            context.startService(GcmRegistrationService.createGcmRegistrationIntent(context));
        }
    }

    public static String getGcmSenderId(Context context) {
         Context appContext = context.getApplicationContext();

        // Try to use gcm_defaultSenderId generated by google services gradle task
        String gcmSenderId = appContext.getResources().getString(R.string.gcm_defaultSenderId);
        if (!TextUtils.isEmpty(gcmSenderId)) {
            return gcmSenderId;
        }

        // Try to use simplegcm_sender_id value for backward compatibility
        gcmSenderId = appContext.getResources().getString(R.string.simplegcm_sender_id);
        if (!TextUtils.isEmpty(gcmSenderId)) {
            return gcmSenderId;
        }

        throw new IllegalArgumentException("You have to override the simplegcm_sender_id string "
                + "resource to provide the GCM sender ID, OR provide it using google services "
                + "gradle plugin and google-services.json configuration.");
    }

    // Called from an IntentService background thread
    void onSuccessfulRegistration(Context context, String regId) {

        // You should send the registration ID to your server over HTTP, so it
        // can use GCM/HTTP or CCS to send messages to your app.
        getGcmListener(context).sendRegistrationIdToBackend(regId);

        // Persist the regID - no need to register again.
        // Also serves for detection of previous registrations
        storeRegistrationId(context, regId);
    }

    public GcmListener getGcmListener(Context context) {
        if (mGcmListener != null) {
            return mGcmListener;
        }
        if (context.getApplicationContext() instanceof GcmListener) {
            return (GcmListener) context.getApplicationContext();
        }
        throw new IllegalStateException("Please implement GcmListener in your Application or use method " + "setGcmListener()");
    }
}
